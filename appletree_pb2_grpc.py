# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import appletree_pb2 as appletree__pb2


class AppletreeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GrowApple = channel.unary_unary(
                '/Appletree/GrowApple',
                request_serializer=appletree__pb2.Time.SerializeToString,
                response_deserializer=appletree__pb2.AppleStatus.FromString,
                )
        self.GetApple = channel.unary_unary(
                '/Appletree/GetApple',
                request_serializer=appletree__pb2.Bucket.SerializeToString,
                response_deserializer=appletree__pb2.Bucket.FromString,
                )
        self.WaterTree = channel.unary_unary(
                '/Appletree/WaterTree',
                request_serializer=appletree__pb2.Water.SerializeToString,
                response_deserializer=appletree__pb2.SoilStatus.FromString,
                )


class AppletreeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GrowApple(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetApple(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaterTree(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AppletreeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GrowApple': grpc.unary_unary_rpc_method_handler(
                    servicer.GrowApple,
                    request_deserializer=appletree__pb2.Time.FromString,
                    response_serializer=appletree__pb2.AppleStatus.SerializeToString,
            ),
            'GetApple': grpc.unary_unary_rpc_method_handler(
                    servicer.GetApple,
                    request_deserializer=appletree__pb2.Bucket.FromString,
                    response_serializer=appletree__pb2.Bucket.SerializeToString,
            ),
            'WaterTree': grpc.unary_unary_rpc_method_handler(
                    servicer.WaterTree,
                    request_deserializer=appletree__pb2.Water.FromString,
                    response_serializer=appletree__pb2.SoilStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Appletree', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Appletree(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GrowApple(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Appletree/GrowApple',
            appletree__pb2.Time.SerializeToString,
            appletree__pb2.AppleStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetApple(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Appletree/GetApple',
            appletree__pb2.Bucket.SerializeToString,
            appletree__pb2.Bucket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaterTree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Appletree/WaterTree',
            appletree__pb2.Water.SerializeToString,
            appletree__pb2.SoilStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
